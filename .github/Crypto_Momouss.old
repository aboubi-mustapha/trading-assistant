import streamlit as st
import requests
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator, EMAIndicator
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator, EMAIndicator
from ta.volatility import BollingerBands
from ta.trend import SMAIndicator, EMAIndicator
from ta.volatility import BollingerBands
import numpy as np

# ======================
# CONFIGURATION G√âN√âRALE
# ======================
st.set_page_config(
    page_title="Crypto Trading Analyst", 
    layout="wide",
    page_icon="üìä"
)
st.title("üìä Crypto Trading Analyst - Strat√©gie Contraire")

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .signal-box {
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    /* Forcer une couleur de texte lisible (noir) pour les signaux */
    .buy-signal {
        border: 3px solid #FF4444;
        background-color: #FFEEEE;
        color: #000000; /* Texte noir pour un meilleur contraste */
    }
    .sell-signal {
        border: 3px solid #00C853;
        background-color: #E8F5E9;
        color: #000000; /* Texte noir pour un meilleur contraste */
    }
    .metric-label {
        font-size: 1.1rem !important;
        color: #616161 !important;
    }
    .metric-value {
        font-size: 1.8rem !important;
        font-weight: 700 !important;
    }
</style>
""", unsafe_allow_html=True)

# ======================
# PARAM√àTRES
# ======================
CRYPTO_LIST = {
    "BTCUSDT": "Bitcoin",
    "ETHUSDT": "Ethereum",
    "BNBUSDT": "Binance Coin",
    "SOLUSDT": "Solana",
    "XRPUSDT": "Ripple",
    "ADAUSDT": "Cardano",
    "DOGEUSDT": "Dogecoin",
    "AVAXUSDT": "Avalanche",
    "DOTUSDT": "Polkadot",
    "TRXUSDT": "TRON",
    "LINKUSDT": "Chainlink",
    "MATICUSDT": "Polygon",
    "SHIBUSDT": "Shiba Inu",
    "LTCUSDT": "Litecoin",
    "UNIUSDT": "Uniswap",
    "ATOMUSDT": "Cosmos",
    "XLMUSDT": "Stellar",
    "ETCUSDT": "Ethereum Classic",
    "XMRUSDT": "Monero",
    "FILUSDT": "Filecoin"
}

INTERVAL = "1d"

# ======================
# FONCTIONS CORE
# ======================
@st.cache_data(ttl=3600)
def fetch_crypto_data(symbol="BTCUSDT"):
    """
    R√©cup√®re les donn√©es historiques depuis l'API Binance.
    Retourne un DataFrame avec date, open, high, low, close, volume.
    """
    try:
        url = "https://api.binance.com/api/v3/klines"
        params = {'symbol': symbol, 'interval': INTERVAL, 'limit': 300}
        
        response = requests.get(url, params=params)
        response.raise_for_status()
        
        # Cr√©ation du DataFrame
        cols = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        df = pd.DataFrame(response.json(), columns=cols + ['ignore']*6)
        df = df[cols]
        
        # Conversion des types
        numeric_cols = ['open', 'high', 'low', 'close', 'volume']
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, axis=1)
        df['date'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        # On retire la derni√®re ligne si elle n‚Äôest pas compl√®te
        return df[['date', 'open', 'high', 'low', 'close', 'volume']].iloc[:-1]

    except Exception as e:
        st.error(f"Erreur de r√©cup√©ration des donn√©es : {str(e)}")
        return None

def calculate_technical_indicators(df):
    """
    Calcule les indicateurs techniques (RSI, moyennes mobiles, volatilit√©, etc.).
    Retourne le DataFrame compl√©t√© avec les indicateurs.
    """
    try:
        # Indicateur RSI
        df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
        
        # Moyennes mobiles simple (MA50 et MA200)
        df['ma50'] = ta.trend.sma_indicator(df['close'], window=50)
        df['ma200'] = ta.trend.sma_indicator(df['close'], window=200)
        
        # Pourcentage de variation et volatilit√©
        df['pct_change_1d'] = df['close'].pct_change() * 100
        df['pct_change_3d'] = df['close'].pct_change(3) * 100
        df['volatility'] = df['close'].pct_change().rolling(14).std() * 100
        
        # Pente de la MA50
        df['ma50_slope'] = df['ma50'].diff(3) / df['ma50'].shift(3) * 100
        
        return df.dropna()
    
    except Exception as e:
        st.error(f"Erreur de calcul des indicateurs : {str(e)}")
        return None

def generate_trading_signals(df):
    """
    G√©n√®re les signaux de trading bas√©s sur une strat√©gie contraire.
    Retourne une liste de dictionnaires d√©crivant les signaux d√©tect√©s.
    """
    if df is None or len(df) < 4:
        return []

    latest = df.iloc[-1]
    signals = []

    # Signal d'achat (Correction brutale)
    buy_condition = (
        (latest['pct_change_1d'] < -5 or latest['pct_change_3d'] < -10) and
        (latest['close'] > latest['ma200']) and
        (latest['volatility'] > 15)
    )
    if buy_condition:
        signals.append({
            "type": "buy",
            "title": "üü• ACHAT - Correction Brutale D√©tect√©e",
            "details": [
                f"Variation 1j : {latest['pct_change_1d']:.1f}%",
                f"Variation 3j : {latest['pct_change_3d']:.1f}%",
                f"Volatilit√© : {latest['volatility']:.1f}%",
                f"Position vs MA200 : +{(latest['close']/latest['ma200'] - 1)*100:.1f}%"
            ]
        })

    # Signal de vente (Rallye excessif)
    sell_condition = (
        (latest['pct_change_1d'] > 5 or latest['pct_change_3d'] > 15) and
        (latest['ma50_slope'] > 2) and
        (latest['rsi'] > 70)
    )
    if sell_condition:
        signals.append({
            "type": "sell",
            "title": "üü© VENTE - Rallye Excessif D√©tect√©",
            "details": [
                f"Variation 1j : {latest['pct_change_1d']:.1f}%",
                f"Variation 3j : {latest['pct_change_3d']:.1f}%",
                f"Pente MA50 : {latest['ma50_slope']:.1f}%",
                f"RSI : {latest['rsi']:.1f}"
            ]
        })

    return signals

# ======================
# INTERFACE UTILISATEUR
# ======================
def main():
    # Barre lat√©rale pour s√©lectionner la crypto
    st.sidebar.header("‚öôÔ∏è Configuration")
    selected_crypto = st.sidebar.radio(
        "S√©lectionnez une cryptomonnaie :",
        options=list(CRYPTO_LIST.keys()),
        format_func=lambda x: f"{CRYPTO_LIST[x]} ({x})",
        index=0
    )

    # R√©cup√©ration des donn√©es
    df = fetch_crypto_data(selected_crypto)
    if df is None:
        st.warning("Donn√©es non disponibles pour cette cryptomonnaie.")
        return

    # Calcul des indicateurs
    df = calculate_technical_indicators(df)
    if df is None:
        st.error("Erreur dans le calcul des indicateurs techniques.")
        return

    # Affichage du titre et du dernier prix
    current_price = df['close'].iloc[-1]
    st.header(f"""
    {CRYPTO_LIST[selected_crypto]} ({selected_crypto}) 
    - **${current_price:,.2f}**
    """)

    # G√©n√©ration et affichage des signaux
    signals = generate_trading_signals(df)
    if signals:
        st.subheader("üö® Signaux de Trading")
        for signal in signals:
            css_class = "buy-signal" if signal["type"] == "buy" else "sell-signal"
            st.markdown(f"""
            <div class="signal-box {css_class}">
                <h3 style='margin-top:0;'>{signal["title"]}</h3>
                <ul style='font-size:16px;'>
                    {''.join([f"<li>{detail}</li>" for detail in signal["details"]])}
                </ul>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.info("üìå Aucun signal de trading d√©tect√© - Position neutre recommand√©e.")

    # Section d'analyse technique
    st.subheader("üìà Analyse Technique")
    with st.expander("Indicateurs Cl√©s", expanded=True):
        cols = st.columns(4)
        metrics = [
            ("RSI (14j)", df['rsi'].iloc[-1], "#FF6D00"),
            ("Volatilit√© (14j)", df['volatility'].iloc[-1], "#2962FF"),
            ("Pente MA50", df['ma50_slope'].iloc[-1], "#00BFA5"),
            ("Distance MA200", (df['close'].iloc[-1]/df['ma200'].iloc[-1]-1)*100, "#7B1FA2")
        ]
        
        for (label, value, color), col in zip(metrics, cols):
            with col:
                st.markdown(f"""
                <div style='padding:1rem; border-radius:8px; border:2px solid {color}30;'>
                    <div class='metric-label'>{label}</div>
                    <div class='metric-value' style='color:{color};'>{value:.1f}%</div>
                </div>
                """, unsafe_allow_html=True)

    # Graphique de l‚Äôhistorique des prix (60 derniers jours)
    st.subheader("üìâ Historique des Prix (60 jours)")
    st.line_chart(
        df.set_index('date')['close'].tail(60),
        use_container_width=True,
        color="#2196F3"
    )

# Point d'entr√©e de l'application
if __name__ == "__main__":
    main()
